import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class Home extends StatefulWidget {
  const Home({super.key});

  @override
  State<Home> createState() => _HomeState();
}

class _HomeState extends State<Home> {
  final TextEditingController _controller = TextEditingController();
  Map<String, dynamic>? weatherData;
  List<dynamic>? hourlyForecast;
  String city = "Addis Ababa";

  final String apiKey = '56f255812ae46fcf7ae2f411cc5262c9'; // replace with your real API key

  @override
  void initState() {
    super.initState();
    fetchWeather(city);
  }

  Future<void> fetchWeather(String city) async {
    try {
      // Current weather
      final url = Uri.parse(
        'https://api.openweathermap.org/data/2.5/weather?q=$city&units=metric&appid=$apiKey',
      );

      // Hourly forecast (next 5 days, 3-hour intervals)
      final forecastUrl = Uri.parse(
        'https://api.openweathermap.org/data/2.5/forecast?q=$city&units=metric&appid=$apiKey',
      );

      final currentResponse = await http.get(url);
      final forecastResponse = await http.get(forecastUrl);

      if (currentResponse.statusCode == 200 &&
          forecastResponse.statusCode == 200) {
        setState(() {
          weatherData = json.decode(currentResponse.body);
          hourlyForecast = json.decode(forecastResponse.body)['list'];
        });
      } else {
        setState(() {
          weatherData = null;
          hourlyForecast = null;
        });
      }
    } catch (e) {
      print("Error: $e");
    }
  }

  Widget buildWeatherIcon(String iconCode, {double size = 60}) {
    return Image.network(
      'https://openweathermap.org/img/wn/$iconCode@2x.png',
      width: size,
      height: size,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 89, 148, 250),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Search field
            TextField(
              controller: _controller,
              style: const TextStyle(color: Colors.white),
              decoration: InputDecoration(
                hintText: 'Search city...',
                hintStyle: const TextStyle(color: Colors.white),
                prefixIcon: const Icon(Icons.search, color: Colors.white),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(35),
                  borderSide: const BorderSide(color: Colors.white),
                ),
                enabledBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(35),
                  borderSide: const BorderSide(color: Colors.white),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(35),
                  borderSide: const BorderSide(color: Colors.white),
                ),
                filled: true,
                fillColor: Colors.white.withOpacity(0.2),
              ),
              onSubmitted: (value) {
                city = value;
                fetchWeather(city);
              },
            ),
            const SizedBox(height: 20),

            // Show weather data
            if (weatherData != null) ...[
              Text(
                '${weatherData!['name']}, ${weatherData!['sys']['country']}',
                style: const TextStyle(
                    fontSize: 22, color: Colors.white, fontWeight: FontWeight.bold),
              ),
              buildWeatherIcon(weatherData!['weather'][0]['icon'], size: 100),
              Text(
                '${weatherData!['main']['temp'].toStringAsFixed(1)}°C',
                style: const TextStyle(fontSize: 48, color: Colors.white),
              ),
              Text(
                '${weatherData!['weather'][0]['description']}',
                style: const TextStyle(fontSize: 18, color: Colors.white),
              ),
              const SizedBox(height: 10),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  Column(
                    children: [
                      const Icon(Icons.water_drop, color: Colors.white),
                      Text('${weatherData!['main']['humidity']}%',
                          style: const TextStyle(color: Colors.white)),
                      const Text('Humidity', style: TextStyle(color: Colors.white)),
                    ],
                  ),
                  Column(
                    children: [
                      const Icon(Icons.air, color: Colors.white),
                      Text('${weatherData!['wind']['speed']} km/h',
                          style: const TextStyle(color: Colors.white)),
                      const Text('Wind', style: TextStyle(color: Colors.white)),
                    ],
                  ),
                  Column(
                    children: [
                      const Icon(Icons.umbrella, color: Colors.white),
                      Text('${weatherData!['clouds']['all']}%',
                          style: const TextStyle(color: Colors.white)),
                      const Text('Cloud', style: TextStyle(color: Colors.white)),
                    ],
                  ),
                ],
              ),
              const SizedBox(height: 20),
              const Text(
                'Hourly Forecast',
                style: TextStyle(
                    fontSize: 20, fontWeight: FontWeight.bold, color: Colors.white),
              ),
              const SizedBox(height: 10),
              SizedBox(
                height: 120,
                child: hourlyForecast != null
                    ? ListView.builder(
                        scrollDirection: Axis.horizontal,
                        itemCount: 10,
                        itemBuilder: (context, index) {
                          final hourData = hourlyForecast![index];
                          final time = DateTime.parse(hourData['dt_txt']);
                          final hour = '${time.hour}:00';
                          final icon = hourData['weather'][0]['icon'];
                          final temp = hourData['main']['temp'];

                          return Container(
                            margin: const EdgeInsets.symmetric(horizontal: 8),
                            padding: const EdgeInsets.all(10),
                            decoration: BoxDecoration(
                              color: Colors.white.withOpacity(0.2),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Text(hour,
                                    style: const TextStyle(color: Colors.white)),
                                buildWeatherIcon(icon, size: 40),
                                Text('${temp.toStringAsFixed(1)}°C',
                                    style: const TextStyle(color: Colors.white)),
                              ],
                            ),
                          );
                        },
                      )
                    : const Text('Loading...', style: TextStyle(color: Colors.white)),
              )
            ] else
              const Center(
                  child: Text('Enter a city',
                      style: TextStyle(color: Colors.white, fontSize: 20))),
          ],
        ),
      ),
    );
  }
}
